{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nlet UpdateProductComponent = class UpdateProductComponent {\n  constructor(route, dataService, fb, router) {\n    this.route = route;\n    this.dataService = dataService;\n    this.fb = fb;\n    this.router = router;\n    this.productId = null;\n    this.updateProductForm = this.fb.group({\n      name: ['', [Validators.required, Validators.minLength(3)]],\n      description: ['', Validators.required],\n      manufacturer: ['', Validators.required],\n      price: [0, [Validators.required, Validators.min(0)]],\n      quantity: [1, [Validators.required, Validators.min(1)]]\n    });\n  }\n  ngOnInit() {\n    // Get product ID from route params\n    this.productId = Number(this.route.snapshot.paramMap.get('id'));\n    if (this.productId) {\n      // Load product data from service\n      console.log(this.productId, typeof this.productId);\n      this.dataService.getProductById(this.productId).subscribe(product => {\n        if (product) {\n          // Populate the form with product data\n          this.updateProductForm.patchValue(product);\n        } else {\n          alert('Product not found.');\n          this.router.navigate(['/inventory']);\n        }\n      }, error => {\n        console.error('Error loading product:', error);\n        alert('An error occurred while loading the product.');\n        this.router.navigate(['/inventory']);\n      });\n    }\n  }\n  onUpdate() {\n    if (this.updateProductForm.valid && this.productId !== null) {\n      // Update product data\n      const updatedProduct = {\n        id: this.productId,\n        ...this.updateProductForm.value\n      };\n      this.dataService.updateProduct(updatedProduct).subscribe(() => {\n        alert('Product updated successfully!');\n        this.router.navigate(['/inventory']);\n      }, error => {\n        console.error('Error updating product:', error);\n        alert('An error occurred while updating the product.');\n      });\n    } else {\n      alert('Please correct the errors in the form.');\n    }\n  }\n};\nUpdateProductComponent = __decorate([Component({\n  selector: 'app-update-product',\n  templateUrl: './update-product.component.html',\n  styleUrls: ['./update-product.component.css']\n})], UpdateProductComponent);\nexport { UpdateProductComponent };","map":{"version":3,"mappings":"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","names":["Component","Validators","UpdateProductComponent","constructor","route","dataService","fb","router","updateProductForm","group","name","required","minLength","description","manufacturer","price","min","quantity","ngOnInit","productId","Number","snapshot","paramMap","get","console","log","getProductById","subscribe","product","patchValue","alert","navigate","error","onUpdate","valid","updatedProduct","id","value","updateProduct","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["D:\\Programming\\Product-Inventory-Management\\src\\app\\features\\inventory\\update-product\\update-product.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { DataService } from '../../../core/data.service';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'app-update-product',\r\n  templateUrl: './update-product.component.html',\r\n  styleUrls: ['./update-product.component.css']\r\n})\r\nexport class UpdateProductComponent implements OnInit {\r\n  updateProductForm: FormGroup;\r\n  productId: number | null = null;\r\n\r\n  constructor(\r\n    private route: ActivatedRoute,\r\n    private dataService: DataService,\r\n    private fb: FormBuilder,\r\n    private router: Router\r\n  ) {\r\n    this.updateProductForm = this.fb.group({\r\n      name: ['', [Validators.required, Validators.minLength(3)]],\r\n      description: ['', Validators.required],\r\n      manufacturer: ['', Validators.required],\r\n      price: [0, [Validators.required, Validators.min(0)]],\r\n      quantity: [1, [Validators.required, Validators.min(1)]]\r\n    });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    // Get product ID from route params\r\n    this.productId = Number(this.route.snapshot.paramMap.get('id'));\r\n\r\n    if (this.productId) {\r\n      // Load product data from service\r\n      console.log(this.productId, typeof this.productId);\r\n      \r\n      this.dataService.getProductById(this.productId).subscribe(\r\n        (product) => {\r\n          if (product) {\r\n            // Populate the form with product data\r\n            this.updateProductForm.patchValue(product);\r\n          } else {\r\n            alert('Product not found.');\r\n            this.router.navigate(['/inventory']);\r\n          }\r\n        },\r\n        (error) => {\r\n          console.error('Error loading product:', error);\r\n          alert('An error occurred while loading the product.');\r\n          this.router.navigate(['/inventory']);\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  onUpdate(): void {\r\n    if (this.updateProductForm.valid && this.productId !== null) {\r\n      // Update product data\r\n      const updatedProduct = { id: this.productId, ...this.updateProductForm.value };\r\n      this.dataService.updateProduct(updatedProduct).subscribe(\r\n        () => {\r\n          alert('Product updated successfully!');\r\n          this.router.navigate(['/inventory']);\r\n        },\r\n        (error) => {\r\n          console.error('Error updating product:', error);\r\n          alert('An error occurred while updating the product.');\r\n        }\r\n      );\r\n    } else {\r\n      alert('Please correct the errors in the form.');\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}